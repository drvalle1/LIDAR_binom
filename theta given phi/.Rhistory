inline void rmultinom(int n, double* prob, int k, int* rn)
{ return ::rmultinom(n, prob, k, rn); }
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
rmultinom_1(probs=prob, size=nobs)
rm(list=ls(all=TRUE))
library('microbenchmark')
install.packages('microbenchmark')
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
res <- microbenchmark(NULL, f(), times=1000)
f
f()
f()
f()
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
res <- microbenchmark(NULL, f(), times=1000)
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
res <- microbenchmark(NULL, f(), times=10000)
res <- microbenchmark(NULL, rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp),
times=1000)
f=function(){
k=rmultinom_1(probs=prob, size=nobs)
}
res <- microbenchmark(NULL, f(), times=10000)
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
for (i in 1:1000){
rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
}
res <- microbenchmark(NULL, f(), times=10000)
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
for (i in 1:100){
rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
}
res <- microbenchmark(NULL, f(), times=100)
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=10000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
for (i in 1:1000){
k=rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
}
res <- microbenchmark(NULL, f(), times=100)
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=100000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
for (i in 1:100){
k=rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
}
f()
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=100000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
for (i in 1:100){
k=rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
}
f()
res1 <- microbenchmark(NULL, f(), times=10)
res1
f=function(){
for (i in 1:100){
k=rmultinom_1(probs=prob, size=nobs)
}
}
f()
res2 <- microbenchmark(NULL, f(), times=10)
res2
res1
rm(list=ls(all=TRUE))
library('microbenchmark')
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
sourceCpp('aux1.cpp')
sourceCpp('teste.cpp')
#basic settings
nobs=100000
ngrp=10
tmp=runif(ngrp)
prob=tmp/sum(tmp)
#my customized function
f=function(){
for (i in 1:400){
k=rmultinom1(runif1=runif(nobs), prob=prob, ncommun=ngrp)
}
}
f()
res1 <- microbenchmark(NULL, f(), times=10)
res1
niter=400
f=function(){
for (i in 1:niter){
k=rmultinom_1(probs=prob, size=nobs)
}
}
f()
res2 <- microbenchmark(NULL, f(), times=10)
res2
res`1`
res1
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
source('LIDAR_binom aux functions.R')
source('LIDAR_binom main function.R')
sourceCpp('aux1.cpp')
#get data
setwd('U:\\GIT_models\\LIDAR_binom\\fake data')
dat=read.csv('fake data y7.csv',as.is=T)
y=data.matrix(dat)
dat=read.csv('fake data n7.csv',as.is=T)
n=data.matrix(dat)
#useful stuff
ncomm=10
ngibbs=3000
nburn=ngibbs/2
#priors
a.phi=1
b.phi=1
gamma=0.1
#run gibbs
mod=LIDAR_binom(y=y,n=n,ncomm=ncomm,a.phi=a.phi,b.phi=b.phi,
gamma=gamma,ngibbs=ngibbs,nburn=nburn)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
source('LIDAR_binom aux functions.R')
source('LIDAR_binom main function.R')
sourceCpp('aux1.cpp')
#get data
setwd('U:\\GIT_models\\LIDAR_binom\\fake data')
dat=read.csv('fake data y7.csv',as.is=T)
y=data.matrix(dat)
dat=read.csv('fake data n7.csv',as.is=T)
n=data.matrix(dat)
#useful stuff
ncomm=10
ngibbs=3000
nburn=ngibbs/2
#priors
a.phi=1
b.phi=1
gamma=0.1
#run gibbs
mod=LIDAR_binom(y=y,n=n,ncomm=ncomm,a.phi=a.phi,b.phi=b.phi,
gamma=gamma,ngibbs=ngibbs,nburn=nburn)
plot(mod$llk,type='l')
seq1=500:ngibbs
plot(mod$llk[seq1],type='l')
seq1=2000:ngibbs
plot(mod$llk[seq1],type='l')
tmp=apply(mod$theta,2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
plot(mod$llk,type='l')
seq1=2000:ngibbs
plot(mod$llk[seq1],type='l')
seq1=2500:ngibbs
plot(mod$llk[seq1],type='l')
seq1=2500:ngibbs
plot(mod$llk[seq1],type='l')
tmp=apply(mod$theta[seq1,],2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
dim(mod$theta)
2500-nburn
seq1=(2500-nburn):(ngibbs-nburn)
tmp=apply(mod$theta[seq1,],2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
source('LIDAR_binom aux functions.R')
source('LIDAR_binom main function.R')
sourceCpp('aux1.cpp')
#get data
setwd('U:\\GIT_models\\LIDAR_binom\\fake data')
dat=read.csv('fake data y5.csv',as.is=T)
y=data.matrix(dat)
dat=read.csv('fake data n5.csv',as.is=T)
n=data.matrix(dat)
#useful stuff
ncomm=10
ngibbs=3000
nburn=ngibbs/2
#priors
a.phi=1
b.phi=1
gamma=0.1
#run gibbs
mod=LIDAR_binom(y=y,n=n,ncomm=ncomm,a.phi=a.phi,b.phi=b.phi,
gamma=gamma,ngibbs=ngibbs,nburn=nburn)
plot(mod$llk,type='l')
seq1=nburn:ngibbs
plot(mod$llk[seq1],type='l')
tmp=apply(mod$theta,2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(61)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
source('LIDAR_binom aux functions.R')
source('LIDAR_binom main function.R')
sourceCpp('aux1.cpp')
#get data
setwd('U:\\GIT_models\\LIDAR_binom\\fake data')
dat=read.csv('fake data y5.csv',as.is=T)
y=data.matrix(dat)
dat=read.csv('fake data n5.csv',as.is=T)
n=data.matrix(dat)
#useful stuff
ncomm=10
ngibbs=3000
nburn=ngibbs/2
#priors
a.phi=0.1
b.phi=0.1
gamma=0.1
#run gibbs
mod=LIDAR_binom(y=y,n=n,ncomm=ncomm,a.phi=a.phi,b.phi=b.phi,
gamma=gamma,ngibbs=ngibbs,nburn=nburn)
plot(mod$llk,type='l')
seq1=nburn:ngibbs
plot(mod$llk[seq1],type='l')
tmp=apply(mod$theta,2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(161)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
source('LIDAR_binom aux functions.R')
source('LIDAR_binom main function.R')
sourceCpp('aux1.cpp')
#get data
setwd('U:\\GIT_models\\LIDAR_binom\\fake data')
dat=read.csv('fake data y7.csv',as.is=T)
y=data.matrix(dat)
dat=read.csv('fake data n7.csv',as.is=T)
n=data.matrix(dat)
#useful stuff
ncomm=10
ngibbs=3000
nburn=ngibbs/2
#priors
a.phi=0.1
b.phi=0.1
gamma=0.1
#run gibbs
mod=LIDAR_binom(y=y,n=n,ncomm=ncomm,a.phi=a.phi,b.phi=b.phi,
gamma=gamma,ngibbs=ngibbs,nburn=nburn)
plot(mod$llk,type='l')
seq1=nburn:ngibbs
plot(mod$llk[seq1],type='l')
tmp=apply(mod$theta,2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
boxplot(theta.estim)
nburn
seq1=(2500-nburn):(ngibbs-nburn)
tmp=apply(mod$theta,2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(166)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
source('LIDAR_binom aux functions.R')
source('LIDAR_binom main function.R')
sourceCpp('aux1.cpp')
#get data
setwd('U:\\GIT_models\\LIDAR_binom\\fake data')
dat=read.csv('fake data y7.csv',as.is=T)
y=data.matrix(dat)
dat=read.csv('fake data n7.csv',as.is=T)
n=data.matrix(dat)
#useful stuff
ncomm=10
ngibbs=10000
nburn=ngibbs/2
#priors
a.phi=0.1
b.phi=0.1
gamma=0.1
#run gibbs
mod=LIDAR_binom(y=y,n=n,ncomm=ncomm,a.phi=a.phi,b.phi=b.phi,
gamma=gamma,ngibbs=ngibbs,nburn=nburn)
plot(mod$llk,type='l')
seq1=nburn:ngibbs
plot(mod$llk[seq1],type='l')
tmp=apply(mod$theta,2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
dim(mod$phi)
setwd('U:\\GIT_models\\LIDAR_binom\\theta given phi')
write.csv(mod$phi,'phi post.csv',row.names=F)
rm(list=ls(all=TRUE))
library('Rcpp')
set.seed(59)
#get functions
setwd('U:\\GIT_models\\LIDAR_binom')
source('LIDAR_binom aux functions.R')
sourceCpp('aux1.cpp')
setwd('U:\\GIT_models\\LIDAR_binom\\theta given phi')
source('LIDAR_binom theta given phi.R')
#get data
setwd('U:\\GIT_models\\LIDAR_binom\\fake data')
dat=read.csv('fake data y7.csv',as.is=T)
y=data.matrix(dat)
dat=read.csv('fake data n7.csv',as.is=T)
n=data.matrix(dat)
#get phi
setwd('U:\\GIT_models\\LIDAR_binom\\theta given phi')
phi.post=data.matrix(read.csv('phi post.csv'))
#useful stuff
ncomm=10
ngibbs=3000
nburn=ngibbs/2
#priors
gamma=0.1
#run gibbs
mod=LIDAR_binom_theta_given_phi(y=y,n=n,ncomm=ncomm,
gamma=gamma,ngibbs=ngibbs,nburn=nburn,
phi.post=phi.post)
plot(mod$llk,type='l')
seq1=500:ngibbs
plot(mod$llk[seq1],type='l')
tmp=apply(mod$theta,2,mean)
nloc=nrow(y)
theta.estim=matrix(tmp,nloc,ncomm)
boxplot(theta.estim)
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncomm) lines(1:nloc,theta.estim[,i],col=i)
